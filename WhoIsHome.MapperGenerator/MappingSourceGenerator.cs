using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using WhoIsHome.Aggregates.Mappers;
using WhoIsHome.Shared.BaseTypes;

namespace WhoIsHome.MapperGenerator;

public static class MappingSourceGenerator
{
    public static void Execute(string path)
    {
        var classes = AssemblyLoader.GetAssemblies()
            .SelectMany(a => a.GetTypes())
            .Where(t => t.IsClass)
            .Where(t => !t.IsAbstract)
            .Where(t => t.IsSubclassOf(typeof(AggregateBase)))
            .ToList();
        
        foreach (var classType in classes)
        {
            var sourceBuilder = new StringBuilder();

            sourceBuilder.AppendLine("// <auto-generated/>");
            sourceBuilder.AppendLine("using System;");
            sourceBuilder.AppendLine("using WhoIsHome.Aggregates;");
            sourceBuilder.AppendLine("using WhoIsHome.DataAccess.Models;");
            sourceBuilder.AppendLine("namespace WhoIsHome.Aggregates;");
            sourceBuilder.AppendLine();

            var aggregateName = classType.Name;

            var aggregateProperties = classType.GetProperties();
            var constructor = classType.GetConstructors().FirstOrDefault();

            if (constructor is null)
            {
                Console.Error.WriteLine($"Class {aggregateName} has no Constructor!");
                continue;
            }

            sourceBuilder.AppendLine($"public static class {aggregateName}Mapper");
            sourceBuilder.AppendLine("{");

            AddToAggregate(sourceBuilder, constructor, aggregateProperties, aggregateName);
            sourceBuilder.AppendLine();
            AddToModel(sourceBuilder, aggregateProperties, aggregateName);

            sourceBuilder.AppendLine("}");

            var source = sourceBuilder.ToString();
            File.WriteAllText($"{path}/{aggregateName}Mapper.cs", source);
            Console.WriteLine($"File {aggregateName}Mapper.cs created.");
        }
    }

    private static void AddToAggregate(
        StringBuilder sourceBuilder,
        ConstructorInfo constructor,
        PropertyInfo[] propertyInfos,
        string name)
    {
        var modelName = $"{name}Model";

        sourceBuilder.AppendLine($"\tpublic static {name} ToAggregate(this {modelName} model)");
        sourceBuilder.AppendLine("\t{");
        sourceBuilder.AppendLine($"\t\treturn new {name}(");

        var parameters = constructor.GetParameters();
        for (var i = 0; i < parameters.Length; i++)
        {
            var ctrName = parameters[i].Name;
            var paramInfo =
                propertyInfos.Single(s => s.Name.Equals(ctrName, StringComparison.CurrentCultureIgnoreCase));

            var lineEnd = i < parameters.Length - 1 ? "," : ");";
            sourceBuilder.AppendLine($"\t\tmodel.{paramInfo.Name}{lineEnd}");
        }

        sourceBuilder.AppendLine("\t}");
    }

    private static void AddToModel(
        StringBuilder sourceBuilder,
        PropertyInfo[] propertySymbols,
        string name)
    {
        var modelName = $"{name}Model";

        sourceBuilder.AppendLine($"\tpublic static {modelName} ToModel(this {name} aggregate)");
        sourceBuilder.AppendLine("\t{");
        sourceBuilder.AppendLine($"\t\treturn new {modelName}");
        sourceBuilder.AppendLine("\t\t{");

        for (var i = 0; i < propertySymbols.Length; i++)
        {
            var propertySymbol = propertySymbols[i];
            var lineEnd = i < propertySymbols.Length - 1 ? "," : string.Empty;

            if (propertySymbol.Name == "Id")
            {
                sourceBuilder.AppendLine($"\t\t\t{propertySymbol.Name} = aggregate.{propertySymbol.Name}.Value{lineEnd}");
                continue;
            }
            
            sourceBuilder.AppendLine($"\t\t\t{propertySymbol.Name} = aggregate.{propertySymbol.Name}{lineEnd}");
        }

        sourceBuilder.AppendLine("\t\t};");
        sourceBuilder.AppendLine("\t}");
    }
}